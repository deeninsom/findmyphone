package com.example.findmyphone

import android.Manifest
import android.app.Activity
import android.app.AlertDialog
import android.app.admin.DevicePolicyManager
import android.content.*
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.widget.Toast
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import io.flutter.embedding.android.FlutterActivity
import io.flutter.plugin.common.MethodChannel

class MainActivity : FlutterActivity() {
    private val CHANNEL = "com.example.findmyphone/service"
    private val REQUEST_CODE_PERMISSIONS = 1001
    private val REQUEST_CODE_DEVICE_ADMIN = 2001

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        requestAllPermissions() // ✅ Gabungkan semua permintaan izin dalam satu fungsi

        // Start Foreground Service menggunakan MethodChannel
        MethodChannel(flutterEngine!!.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "startForegroundService" -> {
                    if (isAllPermissionsGranted()) {
                        startAppropriateService()
                        result.success("Service Started")
                    } else {
                        result.error("PERMISSION_DENIED", "Permissions are not granted", null)
                    }
                }
                else -> result.notImplemented()
            }
        }
    }

    // ✅ Fungsi untuk meminta semua izin yang dibutuhkan
    private fun requestAllPermissions() {
        val permissionsToRequest = mutableListOf(
            Manifest.permission.CAMERA,
            Manifest.permission.WRITE_EXTERNAL_STORAGE
        )

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !isIgnoringBatteryOptimizations()) {
            requestIgnoreBatteryOptimization()
        }

        if (permissionsToRequest.any { ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED }) {
            ActivityCompat.requestPermissions(this, permissionsToRequest.toTypedArray(), REQUEST_CODE_PERMISSIONS)
        }

        if (!isDeviceAdminActive()) {
            showDeviceAdminWarning()
        } else {
            startAppropriateService()
        }
    }

    // ✅ Fungsi untuk memeriksa apakah semua izin telah diberikan
    private fun isAllPermissionsGranted(): Boolean {
        val cameraPermission = ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
        val storagePermission = ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
        return cameraPermission == PackageManager.PERMISSION_GRANTED &&
                storagePermission == PackageManager.PERMISSION_GRANTED &&
                isIgnoringBatteryOptimizations() &&
                isDeviceAdminActive()
    }

    // ✅ Fungsi untuk memeriksa apakah aplikasi diabaikan dari optimasi baterai
    private fun isIgnoringBatteryOptimizations(): Boolean {
        val powerManager = getSystemService(Context.POWER_SERVICE) as android.os.PowerManager
        return powerManager.isIgnoringBatteryOptimizations(packageName)
    }

    // ✅ Minta izin agar aplikasi diabaikan dari optimasi baterai
    private fun requestIgnoreBatteryOptimization() {
        val intent = Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS).apply {
            data = Uri.parse("package:$packageName")
        }
        startActivity(intent)
    }

    // ✅ Fungsi untuk menampilkan pop-up sebelum meminta Device Admin
    private fun showDeviceAdminWarning() {
        AlertDialog.Builder(this)
            .setTitle("Enable Device Admin")
            .setMessage("This app requires Device Admin permission for security features. Please enable it in the next screen.")
            .setPositiveButton("Proceed") { _, _ -> requestDeviceAdmin() }
            .setNegativeButton("Cancel") { _, _ -> 
                Toast.makeText(this, "Device Admin permission is required for full functionality.", Toast.LENGTH_LONG).show()
                finishAffinity()
            }
            .setCancelable(false)
            .show()
    }

    // ✅ Meminta pengguna untuk mengaktifkan Device Admin
    private fun requestDeviceAdmin() {
        val intent = Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN).apply {
            putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, ComponentName(this@MainActivity, MyDevicesAdminReceiver::class.java))
            putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, "This app requires device admin permission to function properly.")
        }
        startActivityForResult(intent, REQUEST_CODE_DEVICE_ADMIN)
    }

    // ✅ Periksa apakah Device Admin aktif
    private fun isDeviceAdminActive(): Boolean {
        val devicePolicyManager = getSystemService(Context.DEVICE_POLICY_SERVICE) as DevicePolicyManager
        val componentName = ComponentName(this, MyDevicesAdminReceiver::class.java)
        return devicePolicyManager.isAdminActive(componentName)
    }

    // ✅ Fungsi untuk memulai service yang sesuai dengan versi Android
    private fun startAppropriateService() {
        val serviceIntent = Intent(this, ForegroundService::class.java)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForegroundService(serviceIntent)
        } else {
            startService(serviceIntent)
        }
    }

    // ✅ Handle hasil permintaan izin
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                startAppropriateService()
                Toast.makeText(this, "Permissions granted", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "Permissions denied", Toast.LENGTH_SHORT).show()
            }
        }
    }

    // ✅ Handle hasil permintaan Device Admin
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_CODE_DEVICE_ADMIN) {
            if (isDeviceAdminActive()) {
                Toast.makeText(this, "Device Admin enabled", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "Device Admin permission denied", Toast.LENGTH_SHORT).show()
            }
        }
    }
}